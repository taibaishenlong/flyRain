<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.wangchao.dao.UserDao">
    <!--开启二级缓存的支持-->
    <cache></cache>
    <!--配置表和类之间的映射关系
        id标签：用于指定主键关键字段
        result标签：用于指定非主键字段
        column属性：用于指定数据库列名
        property属性：用于指定实体类属性名称
    -->
    <resultMap id="userMap" type="com.wangchao.bean.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
    </resultMap>
    <!--查询所有用户信息 使用别名时，可以使用resultMap属性来映射上面的id-->
    <!--<select id="findAll" resultType="com.wangchao.bean.User">-->
    <select id="findAll" resultMap="userMap">
        select * from user;
    </select>
    <!--添加一条数据信息-->
    <insert id="saveUser" parameterType="com.wangchao.bean.User">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--删除一条数据-->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        delete from user where id = #{id}
    </delete>

    <!--根据id修改数据-->
    <update id="updateUserById" parameterType="com.wangchao.bean.User">
        update user set username = #{username},birthday = #{birthday},sex=#{sex},address=#{address} where id = #{id}
    </update>

    <!--根据用户id查询用户信息 useCache代表当前statement要使用二级缓存，如果不使用  值为false-->
    <!--<select id="selectUserById" parameterType="java.lang.Integer" resultType="com.wangchao.bean.User" useCache="true">
        select * from user where id = #{id}
    </select>-->
    <!--模糊查询 一种方式：
    select * from user where username like  #{username}
     另一种方式：
     select * from user wehere username like '%${value}%'
     -->
    <select id="findUserLike" resultType="com.wangchao.bean.User" parameterType="java.lang.String">
        select * from user where username like '%${value}%'
    </select>
<!--查询总记录数-->
    <select id="countUser" resultType="java.lang.Integer">
        select count(id) from user
     </select>
    <!--根据queryvo中的条件查询用户-->
    <select id="findUserByQv" resultType="com.wangchao.bean.User" parameterType="com.wangchao.bean.QueryVo">
        select * from user where username like #{user.username}
    </select>
    <!--动态SQL-->
    <select id="findByUserIf" resultType="user" parameterType="user">
        select * from user where 1=1
        <if test="username!=null and username != ''">
            and username like #{username}
        </if>
        <if test="address != null">
            and address like #{address}
        </if>
    </select>

    <!--动态SQL 使用where替换-->
    <select id="findByUser" resultType="user" parameterType="user">
        select * from user
        <where>
            <if test="username!=null and username != ''">
                and username like #{username}
            </if>
            <if test="address != null">
                and address like #{address}
            </if>
        </where>
    </select>
    <!--对于有些sql语句有共同部分 的课抽离出来  -->
    <sql id="requiredSql">
        select * from user
    </sql>
    <!--查询所有用户在id的集合之中-->
    <select id="findInIds" resultType="user" parameterType="queryvo">
        <include refid="requiredSql"/>
        <where>
            <if test="list != null and list.size() > 0">
                <foreach collection="list"  open="id in("  close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>